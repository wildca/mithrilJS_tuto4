/**
 * Simple dependency injector.
 *
 * Properties:
 *   {fcn} setMixin (name, mixinClass): Let mixin be known as 'name'.
 *   {fcn} injectMixins (names, this): Inject mixins.
 *     {array|str} names: inject mixins with these names.
 *     {context}   this: where the mixins are injected, e.g. controller's 'this'
 *     Each mixin is injected as 'this[name]'. The mixin's own properties can be
 *     then referred to as 'this[name].prop
 *   {fcn} extend (name, createChild): extend the mixin 'name'.
 *     {str} name: mixin name.
 *     {fcn} createChild (parentConstructor): returns an extended class
 *
 * SAMPLE USAGE ====================================================================

    <script src="js/vendor/mithril.js"></script>
    <script src="js/vendor/validator.js"></script>
    <script src="../mixins/Solder/Solder.js"></script>
    <script src="../mixins/ValidationMixin/ValidationMixin.js"></script>
    <script src="../mixins/FormMixin/FormMixin.js"></script>

    // mixins ======================================================================
    var solder = new Solder();
    solder.setMixin('validator', ValidationMixin);
    solder.setMixin('form', FormMixin);

    // app =========================================================================
    var app = {
      controller: function () {
        var self = this;

        solder.injectMixins(['validator', 'form'], this); // injects this.validator & this.form
        var v = this.validator.checks;

        var validations = {
          name: function (nameValue) { return v.isLength(nameValue,4, 10); }, // name refers to this.name
          dept: function (deptValue) { return v.isLength(deptValue, 1); }
        };

        this.name = m.prop('John');
        this.dept = m.prop('dev');

        this.check = function (attr, key) {
          return function (e) {
            m.withAttr(attr, self[key])(e);
            self.validator.validateValue(key, validations);
          };
        };

        this.submit = function (e) {
          e.preventDefault();
          e.stopPropagation();

          // validate
          this.validator.validate(validations);
          if (!this.validator.hasErrors()) {
            // post
            this.form.submitForm(
              {
                method: 'POST', url: '/form',
                data: { name: this.name(), dept: this.dept() }
              },
              function (obj) { log('success', obj); },
              function (str) { log('failure', str); }
            );
          }
        }.bind(this);

        function log (str, load) {
          console.log(str + '. form.state=', self.form._formState, 'status=', self.form._xhrStatus, 'error=', self.form._formError);
          console.log('load=', load);
        }
      },

      view: function (ctrl) {
        return m('form', [ // <form> is optional
          m('div', 'name (4 to 10 chars)'),
          m('div', [
            m('input' + (ctrl.validator.hasError('name') ? '.error' : ''),
              { value: ctrl.name(), onchange: ctrl.check('value', 'name') }),
            ctrl.validator.hasError('name') ? m('p.error.error-msg', 'The name must be 4 to 10 chars.') : ''
          ]),
          m('div', [
            m('input' + (ctrl.validator.hasError('dept') ? '.error' : ''),
              { value: ctrl.dept(), onchange: ctrl.check('value', 'dept') }),
            ctrl.validator.hasError('dept') ? m('p.error.error-msg', 'A department name is required.') : ''
          ]),
          m('button[type=button]', { onclick: ctrl.submit, disabled: !ctrl.form.isEditable() }, 'Submit [type=button]'),
          m('button[type=submit]', { onclick: ctrl.submit, disabled: !ctrl.form.isEditable() }, 'Submit [type=submit]'),
          postStatus()
        ]);

        function postStatus () {
          var status = '';
          if (ctrl.form.getError()) { status = 'An error has occurred. Please try again.'; }
          else if (ctrl.form.isSubmitting()) { status = 'Processing ...'; }
          else if (ctrl.form.isSubmitted()) { status = 'Data updated.'; }
          return m('p', status);
        }
      }
    };

    m.module(document.body, app);

 * SAMPLE USAGE: extend a mixin ====================================================

    var solder = new Solder();
    solder.setMixin('validator', ValidationMixin);
    solder.extend('validator', validatorPlus);

    function validatorPlus (Parent) { // Parent -> 'validator's ValidationMixin
      function ValidatorPlus (/*arguments*/) {
        Parent.apply(this, arguments);
        this.newProperty = true; // add a property
      }
      ValidatorPlus.prototype = Object.create(Parent.prototype);

      ValidatorPlus.prototype.newFcn = function () {  // add a prototype fcn
        return true;
      };
      return ValidatorPlus;
    }
 */